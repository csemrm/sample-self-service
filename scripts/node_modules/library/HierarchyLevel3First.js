/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const ImageView = require('sf-core/ui/imageview');
const Image = require('sf-core/ui/image');
const ImageFillType = require('sf-core/ui/imagefilltype');
const Color = require('sf-core/ui/color');
const FlexLayout = require('sf-core/ui/flexlayout');
const Label = require('sf-core/ui/label');
const Font = require('sf-core/ui/font');



const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const HierarchyLevel3First = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const imageview9Style = getCombinedStyle(".imageView", {
			width: 60,
			height: 60,
			image: Image.createFromFile("images://avatar3.png"),
			imageFillType: ImageFillType.ASPECTFIT,
			marginLeft: 135,
			borderRadius: 30,
			borderWidth: 1,
			borderColor: Color.create(255, 151, 151, 151)
		});
		var imageview9 = new ImageView(imageview9Style);
		this.addChild(imageview9);
		
		const flexlayout827Style = getCombinedStyle(".flexLayout", {
			width: null,
			height: 60,
			paddingLeft: 10,
			flexGrow: 1
		});
		var flexlayout827 = new FlexLayout(flexlayout827Style);
		this.addChild(flexlayout827);
		
		const flexlayout919Style = getCombinedStyle(".flexLayout", {
			width: 1,
			height: 37,
			top: 0,
			left: 105,
			backgroundColor: Color.create(255, 151, 151, 151),
			positionType: FlexLayout.PositionType.ABSOLUTE
		});
		var flexlayout919 = new FlexLayout(flexlayout919Style);
		this.addChild(flexlayout919);
		
		const flexlayout933Style = getCombinedStyle(".flexLayout", {
			width: 30,
			height: 1,
			left: 105,
			backgroundColor: Color.create(255, 151, 151, 151),
			positionType: FlexLayout.PositionType.ABSOLUTE
		});
		var flexlayout933 = new FlexLayout(flexlayout933Style);
		this.addChild(flexlayout933);
		
		const flexlayout960Style = getCombinedStyle(".flexLayout", {
			width: 1,
			height: 8,
			left: 165,
			bottom: 0,
			backgroundColor: Color.create(255, 151, 151, 151),
			positionType: FlexLayout.PositionType.ABSOLUTE
		});
		var flexlayout960 = new FlexLayout(flexlayout960Style);
		this.addChild(flexlayout960);
		
		const label1816Style = getCombinedStyle(".label .label-list-item-value", {
			height: 30,
			width: null,
			textColor: Color.create(255, 0, 0, 0),
			text: "Thomas Turner",
			font: Font.create("Arial", 18, Font.NORMAL)
		});
		var label1816 = new Label(label1816Style);
		if(label1816Style.scrollEnabled === false)
			label1816.ios && (label1816.ios.scrollEnabled = false);
		flexlayout827.addChild(label1816);
		
		const label1817Style = getCombinedStyle(".label .label-list-item-value", {
			height: 30,
			width: null,
			text: "Sales Responsible"
		});
		var label1817 = new Label(label1817Style);
		if(label1817Style.scrollEnabled === false)
			label1817.ios && (label1817.ios.scrollEnabled = false);
		flexlayout827.addChild(label1817);
		
		//assign the children to hierarchyLevel3First 
		this.children = Object.assign({}, {
			imageview9: imageview9,
			flexlayout827: flexlayout827,
			flexlayout919: flexlayout919,
			flexlayout933: flexlayout933,
			flexlayout960: flexlayout960
		});
		
		//assign the children of flexlayout827
		flexlayout827.children = Object.assign({}, {
			label1816: label1816,
			label1817: label1817
		});
		
	});

HierarchyLevel3First.defaults = getCombinedStyle(".flexLayout", {
	width: 360,
	height: 75,
	alignItems: FlexLayout.AlignItems.CENTER,
	flexDirection: FlexLayout.FlexDirection.ROW,
	positionType: FlexLayout.PositionType.RELATIVE
});

module && (module.exports = HierarchyLevel3First);