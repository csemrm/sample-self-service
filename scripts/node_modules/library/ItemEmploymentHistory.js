/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');

const ListItem1 = require("../../components/ListItem1");
const HorizontalDivider = require("../../components/HorizontalDivider");

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const ItemEmploymentHistory = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const flexlayout289Style = getCombinedStyle(".flexLayout", {
			width: null,
			height: null,
			paddingLeft: 10,
			paddingRight: 10,
			id: 8,
			flexGrow: 1
		});  
		var flexlayout289 = new FlexLayout(flexlayout289Style);  
		this.addChild(flexlayout289);
		
		const headerTitleStyle = getCombinedStyle(".label .label-list-item-header", {
			width: null,
			height: 30,
			text: "COMPANY NAME",
			id: 1
		});  
		var headerTitle = new Label(headerTitleStyle);  
		if(headerTitleStyle.scrollEnabled === false)
			headerTitle.ios && (headerTitle.ios.scrollEnabled = false);
		flexlayout289.addChild(headerTitle);
		this.headerTitle = headerTitle;

		const row1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 50,
			backgroundColor: Color.create(255, 255, 255, 255),
			id: 2,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		}); 
		var row1 = new ListItem1(row1Style, "itemEmploymentHistory");  
		flexlayout289.addChild(row1);
		this.row1 = row1;

		const flexlayout606_4Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		}); 
		var flexlayout606_4 = new HorizontalDivider(flexlayout606_4Style, "itemEmploymentHistory");  
		flexlayout289.addChild(flexlayout606_4);
		
		const row2Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 50,
			backgroundColor: Color.create(255, 255, 255, 255),
			id: 3,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		}); 
		var row2 = new ListItem1(row2Style, "itemEmploymentHistory");  
		flexlayout289.addChild(row2);
		this.row2 = row2;

		const flexlayout606_3Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		}); 
		var flexlayout606_3 = new HorizontalDivider(flexlayout606_3Style, "itemEmploymentHistory");  
		flexlayout289.addChild(flexlayout606_3);
		
		const row3Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 50,
			backgroundColor: Color.create(255, 255, 255, 255),
			id: 4,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		}); 
		var row3 = new ListItem1(row3Style, "itemEmploymentHistory");  
		flexlayout289.addChild(row3);
		this.row3 = row3;

		const flexlayout606_2Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		}); 
		var flexlayout606_2 = new HorizontalDivider(flexlayout606_2Style, "itemEmploymentHistory");  
		flexlayout289.addChild(flexlayout606_2);
		
		const row4Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 50,
			backgroundColor: Color.create(255, 255, 255, 255),
			id: 5,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		}); 
		var row4 = new ListItem1(row4Style, "itemEmploymentHistory");  
		flexlayout289.addChild(row4);
		this.row4 = row4;

		const flexlayout606_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		}); 
		var flexlayout606_1 = new HorizontalDivider(flexlayout606_1Style, "itemEmploymentHistory");  
		flexlayout289.addChild(flexlayout606_1);
		
		const row5Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 50,
			backgroundColor: Color.create(255, 255, 255, 255),
			id: 6,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		}); 
		var row5 = new ListItem1(row5Style, "itemEmploymentHistory");  
		flexlayout289.addChild(row5);
		this.row5 = row5;

		const flexlayout606Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		}); 
		var flexlayout606 = new HorizontalDivider(flexlayout606Style, "itemEmploymentHistory");  
		flexlayout289.addChild(flexlayout606);
		
		const row6Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 50,
			backgroundColor: Color.create(255, 255, 255, 255),
			id: 7,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		}); 
		var row6 = new ListItem1(row6Style, "itemEmploymentHistory");  
		flexlayout289.addChild(row6);
		this.row6 = row6;

		//assign the children to itemEmploymentHistory 
		this.children = Object.assign({}, {
			flexlayout289: flexlayout289
		});
		
		//assign the children of flexlayout289
		flexlayout289.children = Object.assign({}, {
			headerTitle: headerTitle,
			row1: row1,
			flexlayout606_4: flexlayout606_4,
			row2: row2,
			flexlayout606_3: flexlayout606_3,
			row3: row3,
			flexlayout606_2: flexlayout606_2,
			row4: row4,
			flexlayout606_1: flexlayout606_1,
			row5: row5,
			flexlayout606: flexlayout606,
			row6: row6
		});
		
	});

ItemEmploymentHistory.defaults = getCombinedStyle(".flexLayout", {
	width: 364,
	height: 350,
	marginBottom: null,
	backgroundColor: Color.create(0, 255, 255, 255),
	paddingBottom: 10,
	paddingLeft: null,
	paddingRight: null,
	alignItems: FlexLayout.AlignItems.STRETCH,
	flexGrow: 1,
	alignSelf: FlexLayout.AlignSelf.STRETCH,
	positionType: FlexLayout.PositionType.RELATIVE
});

module && (module.exports = ItemEmploymentHistory);