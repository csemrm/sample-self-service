/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const ImageView = require('sf-core/ui/imageview');
const ImageFillType = require('sf-core/ui/imagefilltype');
const Image = require('sf-core/ui/image');



const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const LayoutHeaderBar = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const flexlayout118Style = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			marginTop: null,
			width: null,
			height: 40,
			top: 20,
			flexDirection: FlexLayout.FlexDirection.ROW
		});
		var flexlayout118 = new FlexLayout(flexlayout118Style);
		this.addChild(flexlayout118);
		
		const leftItemsStyle = getCombinedStyle(".flexLayout", {
			height: null,
			width: 75,
			backgroundColor: Color.create(0, 255, 255, 255),
			flexGrow: null
		});
		var leftItems = new FlexLayout(leftItemsStyle);
		flexlayout118.addChild(leftItems);
		this.leftItems = leftItems;

		const headerBarTitleStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			textColor: Color.create(255, 255, 255, 255),
			width: null,
			height: null,
			textAlignment: TextAlignment.MIDCENTER,
			flexGrow: 2
		});
		var headerBarTitle = new Label(headerBarTitleStyle);
		if(headerBarTitleStyle.scrollEnabled === false)
			headerBarTitle.ios && (headerBarTitle.ios.scrollEnabled = false);
		flexlayout118.addChild(headerBarTitle);
		this.headerBarTitle = headerBarTitle;

		const rightItemsStyle = getCombinedStyle(".flexLayout", {
			height: null,
			width: 75,
			backgroundColor: Color.create(0, 255, 255, 255),
			flexGrow: null,
			flexDirection: FlexLayout.FlexDirection.ROW,
			alignItems: FlexLayout.AlignItems.CENTER,
			justifyContent: FlexLayout.JustifyContent.SPACE_AROUND
		});
		var rightItems = new FlexLayout(rightItemsStyle);
		flexlayout118.addChild(rightItems);
		this.rightItems = rightItems;

		const rightItem2Style = getCombinedStyle(".imageView", {
			height: 20,
			width: 20,
			imageFillType: ImageFillType.ASPECTFIT,
			alignSelf: FlexLayout.AlignSelf.AUTO,
			flexGrow: null
		});
		var rightItem2 = new ImageView(rightItem2Style);
		rightItems.addChild(rightItem2);
		this.rightItem2 = rightItem2;

		const rightItem1Style = getCombinedStyle(".imageView", {
			height: 20,
			width: 20,
			imageFillType: ImageFillType.ASPECTFIT,
			image: null,
			alignSelf: FlexLayout.AlignSelf.AUTO,
			flexGrow: null
		});
		var rightItem1 = new ImageView(rightItem1Style);
		rightItems.addChild(rightItem1);
		this.rightItem1 = rightItem1;

		//assign the children to layoutHeaderBar 
		this.children = Object.assign({}, {
			flexlayout118: flexlayout118
		});
		
		//assign the children of flexlayout118
		flexlayout118.children = Object.assign({}, {
			leftItems: leftItems,
			headerBarTitle: headerBarTitle,
			rightItems: rightItems
		});
		
		//assign the children of rightItems
		rightItems.children = Object.assign({}, {
			rightItem2: rightItem2,
			rightItem1: rightItem1
		});
		
	});

LayoutHeaderBar.defaults = getCombinedStyle(".flexLayout .flexLayout-headerBar", {
	width: 358,
	height: 144,
	positionType: FlexLayout.PositionType.RELATIVE
});

module && (module.exports = LayoutHeaderBar);