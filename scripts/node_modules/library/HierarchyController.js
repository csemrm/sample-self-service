/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const Label = require('sf-core/ui/label');
const Font = require('sf-core/ui/font');
const FlexLayout = require('sf-core/ui/flexlayout');

const HierarchyLevel1 = require("../../components/HierarchyLevel1");
const HierarchyLevel2 = require("../../components/HierarchyLevel2");
const HierarchyLevel3First = require("../../components/HierarchyLevel3First");
const HiearchyLevel3Remaining = require("../../components/HiearchyLevel3Remaining");

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const HierarchyController = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const hc_headerStyle = getCombinedStyle(".label .label-list-item-header", {
			height: 25,
			width: null,
			text: "ORGANISATION",
			font: Font.create("Arial", 16, Font.NORMAL)
		});
		var hc_header = new Label(hc_headerStyle);
		if(hc_headerStyle.scrollEnabled === false)
			hc_header.ios && (hc_header.ios.scrollEnabled = false);
		this.addChild(hc_header);
		this.hc_header = hc_header;

		const hc_level1Style = getCombinedStyle(".flexLayout", {
			height: 75,
			width: 360,
			left: 0,
			top: 0,
			alignItems: FlexLayout.AlignItems.CENTER,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var hc_level1 = new HierarchyLevel1(hc_level1Style, "hierarchyController");
		this.addChild(hc_level1);
		
		const hc_level2Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: 360,
			height: 75,
			alignItems: FlexLayout.AlignItems.CENTER,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var hc_level2 = new HierarchyLevel2(hc_level2Style, "hierarchyController");
		this.addChild(hc_level2);
		
		const hc_level3Style = getCombinedStyle(".flexLayout", {
			width: 360,
			height: 75,
			left: 0,
			top: 0,
			alignItems: FlexLayout.AlignItems.CENTER,
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var hc_level3 = new HierarchyLevel3First(hc_level3Style, "hierarchyController");
		this.addChild(hc_level3);
		
		const hc_level3_1Style = getCombinedStyle(".flexLayout", {
			width: 360,
			top: 0,
			height: 75,
			left: 0,
			flexDirection: FlexLayout.FlexDirection.ROW,
			alignItems: FlexLayout.AlignItems.CENTER,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var hc_level3_1 = new HiearchyLevel3Remaining(hc_level3_1Style, "hierarchyController");
		this.addChild(hc_level3_1);
		
		//assign the children to hierarchyController 
		this.children = Object.assign({}, {
			hc_header: hc_header,
			hc_level1: hc_level1,
			hc_level2: hc_level2,
			hc_level3: hc_level3,
			hc_level3_1: hc_level3_1
		});
		
	});

HierarchyController.defaults = getCombinedStyle(".flexLayout", {
	width: 360,
	height: 345,
	positionType: FlexLayout.PositionType.RELATIVE
});

module && (module.exports = HierarchyController);